{"version":3,"sources":["utils/constants.ts","types/SearchParam.ts","types/SortField.ts","types/SortOrder.ts","types/Sex.ts","utils/helpers.ts","components/Navbar.tsx","components/Layout.tsx","components/NotFoundPage.tsx","components/HomePage.tsx","api.ts","utils/searchHelper.ts","components/Loader/Loader.tsx","components/PersonLink.tsx","components/PeopleTableRow.tsx","components/SearchLink.tsx","components/SortLink.tsx","components/PeopleTable.tsx","components/PeopleFilters.tsx","components/PeoplePage.tsx","App.tsx","index.tsx"],"names":["API_URL","CENTURIES","CENTURY_VALUE","SearchParam","SortField","SortOrder","Sex","getNavLinkClass","isActive","classNames","getFilteredPeople","people","sex","query","centuries","normalizedQuery","toLowerCase","filteredPeople","filter","person","name","fatherName","motherName","includes","length","year","born","Math","ceil","toString","Navbar","memo","search","useLocation","className","role","to","pathname","Layout","NotFoundPage","HomePage","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","Loader","PersonLink","slug","Female","PeopleTableRow","selectedPersonSlug","died","mother","father","SearchLink","children","params","props","useSearchParams","searchParams","SortLink","field","sort","get","Sort","order","Order","iconClass","Desc","PeopleTable","map","option","PeopleFilters","setSearchParams","Query","getAll","Centuries","All","sexValue","type","placeholder","onChange","event","inputValue","target","century","currentCenturies","centuryToToggle","PeoplePage","useState","isLoading","setIsLoading","isError","setIsError","setPeople","useParams","useEffect","getPeople","peopleFromAfar","find","getPreparedPeople","catch","finally","sortedPeople","useMemo","direction","a","b","Name","localeCompare","Born","Died","getSortedPeople","isRequestSuccessful","hasPeople","hasVisiblePeople","App","path","element","index","replace","createRoot","document","getElementById","render"],"mappings":"iRACaA,EAAU,oEAEVC,EAAY,CAAC,KAAM,KAAM,KAAM,KAAM,MACrCC,EAAgB,ICJjBC,EAAZ,SAAYA,GAAZ,OAAYA,EAAZ,YAAYA,EAAZ,cAAYA,EAAZ,UAAYA,EAAZ,cAAYA,EAAZ,sBAAYA,CAAZ,MCAYC,EAAZ,SAAYA,GAAZ,OAAYA,EAAZ,YAAYA,EAAZ,UAAYA,EAAZ,YAAYA,EAAZ,YAAYA,CAAZ,MCAYC,EAAZ,SAAYA,GAAZ,OAAYA,EAAZ,UAAYA,EAAZ,YAAYA,CAAZ,MCAYC,EAAZ,SAAYA,GAAZ,OAAYA,EAAZ,UAAYA,EAAZ,SAAYA,EAAZ,WAAYA,CAAZ,MCIO,SAASC,EAAT,GAA+D,IAApCC,EAAmC,EAAnCA,SAChC,OAAOC,IAAW,cAAe,CAC/B,8BAA+BD,GAElC,CA+CM,SAASE,EACdC,EACAC,EACAC,EACAC,GAEA,IAAMC,EAAkBF,EAAMG,cAC1BC,EAAc,YAAON,GAsBzB,OApBIC,IACFK,EAAiBA,EAAeC,QAAO,SAAAC,GAAM,OAAIA,EAAOP,MAAQA,CAAnB,KAG3CG,IACFE,EAAiBA,EAAeC,QAC9B,gBAAGE,EAAH,EAAGA,KAAMC,EAAT,EAASA,WAAYC,EAArB,EAAqBA,WAArB,OACEF,EAAKJ,cAAcO,SAASR,KAA5B,OACGM,QADH,IACGA,OADH,EACGA,EAAYL,cAAcO,SAASR,MADtC,OAEGO,QAFH,IAEGA,OAFH,EAEGA,EAAYN,cAAcO,SAASR,GAHxC,KAQAD,EAAUU,SACZP,EAAiBA,EAAeC,QAC9B,gBA7BqBO,EA6BlBC,EAAH,EAAGA,KAAH,OAAcZ,EAAUS,UA7BHE,EA6BuBC,EA5BzCC,KAAKC,KAAKH,EAAOvB,IA4B8B2B,WAAlD,KAIGZ,CACR,C,WCjFYa,EAASC,gBAAK,WACzB,IAAQC,EAAWC,cAAXD,OAER,OACE,qBACE,UAAQ,MACRE,UAAU,iCACVC,KAAK,aACL,aAAW,kBAJb,SAME,qBAAKD,UAAU,YAAf,SACE,sBAAKA,UAAU,eAAf,UACE,cAAC,IAAD,CACEE,GAAG,IACHF,UAAW3B,EAFb,kBAOA,cAAC,IAAD,CACE6B,GAAI,CAAEC,SAAU,SAAUL,UAC1BE,UAAW3B,EAFb,0BAUT,IC9BY+B,EAAS,kBACpB,sBAAK,UAAQ,MAAb,UACE,cAACR,EAAD,IAEA,qBAAKI,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,cAAC,IAAD,UANc,ECHTK,EAAe,kBAC1B,oBAAIL,UAAU,QAAd,2BAD0B,ECAfM,EAAW,kBACtB,oBAAIN,UAAU,QAAd,sBADsB,E,qBCGxB,SAASO,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,EAAxB,GAC3B,C,sDAEM,iHAEED,EAAK,KACTK,MAAK,kBAAMC,MAAM/C,EAAZ,IACL8C,MAAK,SAAAE,GAAQ,OAAIA,EAASC,MAAb,KAJX,4C,sBCCA,SAASC,EACdC,EACAC,GAGA,IAAMC,EAAY,IAAIC,gBACpBH,EAActB,YA+BhB,OAjBA0B,OAAOC,QAAQJ,GACZK,SAAQ,YAAmB,IAAD,mBAAhBC,EAAgB,KAAXC,EAAW,KACX,OAAVA,EACFN,EAAUO,OAAOF,GACRG,MAAMC,QAAQH,IAEvBN,EAAUO,OAAOF,GAEjBC,EAAMF,SAAQ,SAAAM,GACZV,EAAUW,OAAON,EAAKK,EACvB,KAEDV,EAAUY,IAAIP,EAAKC,EAEtB,IAGIN,EAAUxB,UAClB,C,UC5CYqC,EAAS,kBACpB,qBAAKhC,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,qBAFG,ECOTiC,EAA8BpC,gBAAK,YAAiB,IAAdZ,EAAa,EAAbA,OACzCa,EAAWC,cAAXD,OAEAoC,EAAoBjD,EAApBiD,KAAMhD,EAAcD,EAAdC,KAAMR,EAAQO,EAARP,IAEpB,OACE,cAAC,IAAD,CACEwB,GAAI,CAAEC,SAAS,MAAD,OAAQ+B,GAAQpC,UAC9BE,UAAWzB,IAAW,CACpB,kBAAmBG,IAAQN,EAAI+D,SAHnC,SAMGjD,GAGN,ICbYkD,EAAkCvC,gBAAK,YAG7C,IAFLZ,EAEI,EAFJA,OACAoD,EACI,EADJA,mBAGEH,EAQEjD,EARFiD,KACAxD,EAOEO,EAPFP,IACAc,EAMEP,EANFO,KACA8C,EAKErD,EALFqD,KACAC,EAIEtD,EAJFsD,OACAnD,EAGEH,EAHFG,WACAoD,EAEEvD,EAFFuD,OACArD,EACEF,EADFE,WAGF,OACE,qBACE,UAAQ,SACRa,UAAWzB,IAAW,CACpB,yBAA0B2D,IAASG,IAHvC,UAME,6BACE,cAACJ,EAAD,CAAYhD,OAAQA,MAGtB,6BAAKP,IACL,6BAAKc,IACL,6BAAK8C,IAEL,6BACGC,EACG,cAACN,EAAD,CAAYhD,OAAQsD,IADjB,OAEHnD,QAFG,IAEHA,IdvCe,Mc0CrB,6BACGoD,EACG,cAACP,EAAD,CAAYhD,OAAQuD,IADjB,OAEHrD,QAFG,IAEHA,Id7Ce,QciD1B,I,gCCtCYsD,EAA8B5C,gBAAK,YAIzC,IAHL6C,EAGI,EAHJA,SACAC,EAEI,EAFJA,OACGC,EACC,iBACJ,EAAuBC,cAAhBC,EAAP,oBAEA,OACE,cAAC,IAAD,yBAIE5C,GAAI,CACFJ,OAAQkB,EAAc8B,EAAcH,KAElCC,GAPN,aASGF,IAGN,ICzBYK,EAA4BlD,gBAAK,YAAgB,IAAD,IAAZmD,EAAY,EAAZA,MAC/C,EAAuBH,cAAhBC,EAAP,oBACMG,EAAI,UAAGH,EAAaI,IAAIjF,EAAYkF,aAAhC,QAAyC,GAC7CC,EAAK,UAAGN,EAAaI,IAAIjF,EAAYoF,cAAhC,QAA0C,GAE/CV,EAAuB,CAC3BM,KAAM,KACNG,MAAO,MAGLE,EAAY,eAahB,OAXIL,IAASD,GACXL,EAAOM,KAAOD,EAEdM,EAAY,WACHL,IAASD,GAAUI,IAC5BT,EAAOM,KAAOD,EACdL,EAAOS,MAAQjF,EAAUoF,KAEzBD,EAAY,cAIZ,cAACb,EAAD,CACEE,OAAQA,EADV,SAGE,sBAAM3C,UAAU,OAAhB,SACE,mBAAGA,UAAWzB,IAAW,MAAO+E,QAIvC,ICjCYE,EAA+B3D,gBAAK,gBAC/CpB,EAD+C,EAC/CA,OACA4D,EAF+C,EAE/CA,mBAF+C,OAI/C,wBACE,UAAQ,cACRrC,UAAU,uDAFZ,UAIE,gCACE,+BACGqB,OAAOC,QAAQpD,GAAWuF,KAAI,mCAAEC,EAAF,KAAUjC,EAAV,YAC7B,6BACE,uBAAMzB,UAAU,8BAAhB,UACG0D,EAED,cAACX,EAAD,CAAUC,MAAOvB,QAJZA,EADoB,IAU/B,wCACA,6CAIJ,gCACGhD,EAAOgF,KAAI,SAAAxE,GAAM,OAChB,cAACmD,EAAD,CAEEnD,OAAQA,EACRoD,mBAAoBA,GAFfpD,EAAOiD,KAFE,QA1ByB,ICFpCyB,EAAgB9D,gBAAK,WAAO,IAAD,MACtC,EAAwCgD,cAAxC,mBAAOC,EAAP,KAAqBc,EAArB,KAEMlF,EAAG,UAAGoE,EAAaI,IAAIjF,EAAYG,YAAhC,QAAwC,GAC3CO,EAAK,UAAGmE,EAAaI,IAAIjF,EAAY4F,cAAhC,QAA0C,GAC/CjF,EAAS,UAAGkE,EAAagB,OAAO7F,EAAY8F,kBAAnC,QAAiD,GAehE,OACE,sBAAK/D,UAAU,QAAf,UACE,mBAAGA,UAAU,gBAAb,qBAEA,mBAAGA,UAAU,aAAa,UAAQ,YAAlC,SACGqB,OAAOC,QAAQlD,GAAKqF,KAAI,YAAsB,IAAD,mBAAnBC,EAAmB,KAAXjC,EAAW,KACtCnD,EAAWmD,IAAUrD,EAAI4F,KAC1BtF,EACDA,IAAQ+C,EACNwC,EAAWxC,IAAUrD,EAAI4F,IAC3B,KACAvC,EAEJ,OACE,cAACgB,EAAD,CAEEzC,UAAWzB,IAAW,CACpB,YAAaD,IAEfqE,OAAQ,CAAEjE,IAAKuF,GALjB,SAOGP,GANIjC,EASV,MAGH,qBAAKzB,UAAU,cAAf,SACE,oBAAGA,UAAU,yBAAb,UACE,uBACEkE,KAAK,SACL,UAAQ,aACRlE,UAAU,QACVmE,YAAY,SACZ1C,MAAO9C,EACPyF,SAhDgB,SAACC,GACzB,IAAM1B,EAAS,IAAIvB,gBAAgB0B,GAC7BwB,EAAaD,EAAME,OAAO9C,MAE5B6C,EACF3B,EAAOZ,IAAI9D,EAAY4F,MAAOS,GAE9B3B,EAAOjB,OAAOzD,EAAY4F,OAG5BD,EAAgBjB,EACjB,IAwCO,sBAAM3C,UAAU,eAAhB,SACE,mBAAGA,UAAU,gBAAgB,cAAY,gBAK/C,qBAAKA,UAAU,cAAf,SACE,sBAAKA,UAAU,iCAAiC,UAAQ,gBAAxD,UACE,qBAAKA,UAAU,aAAf,SACGjC,EAAU0F,KAAI,SAAAe,GAAO,OACpB,cAAC/B,EAAD,CAEEzC,UAAWzB,IAAW,SAAU,OAAQ,CACtC,UAAWK,EAAUS,SAASmF,KAEhC7B,OAAQ,CAAE/D,WbOxB6F,EaPiD7F,EbQjD8F,EaR4DF,EbUrDC,EAAiBpF,SAASqF,GAC7BD,EAAiBzF,QAAO,SAAAwF,GAAO,OAAIA,IAAYE,CAAhB,IAD5B,sBAECD,GAFD,CAEmBC,MajBd,SAOGF,GANIA,GbUd,IACLC,EACAC,CadgC,MAaxB,qBAAK1E,UAAU,mBAAf,SACE,cAACyC,EAAD,CACEzC,UAAWzB,IAAW,SAAU,aAAc,CAC5C,gBAAiBK,EAAUU,SAE7BqD,OAAQ,CAAE/D,UAAW,MAJvB,wBAYN,qBAAKoB,UAAU,cAAf,SACE,cAACyC,EAAD,CACEzC,UAAU,0CACV2C,OAAQ,CACNjE,IAAK,KACLC,MAAO,KACPC,UAAW,MALf,mCAaP,ICtGY+F,EAAa,WAAO,IAAD,UAC9B,EAAkCC,oBAAS,GAA3C,mBAAOC,EAAP,KAAkBC,EAAlB,KACA,EAA8BF,oBAAS,GAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA4BJ,mBAAmB,IAA/C,mBAAOnG,EAAP,KAAewG,EAAf,KACQ/C,EAASgD,cAAThD,KACR,EAAuBW,cAAhBC,EAAP,oBAEMG,EAAI,UAAGH,EAAaI,IAAIjF,EAAYkF,aAAhC,QAAyC,GAC7CC,EAAK,UAAGN,EAAaI,IAAIjF,EAAYoF,cAAhC,QAA0C,GAC/C3E,EAAG,UAAGoE,EAAaI,IAAIjF,EAAYG,YAAhC,QAAwC,GAC3CO,EAAK,UAAGmE,EAAaI,IAAIjF,EAAY4F,cAAhC,QAA0C,GAC/CjF,EAAS,UAAGkE,EAAagB,OAAO7F,EAAY8F,kBAAnC,QAAiD,GAEhEoB,qBAAU,WACRL,GAAa,GTpBV,WAAP,+BSsBIM,GACGxE,MAAK,SAAAyE,GAAc,OAAIJ,EdpBvB,SAA2BxG,GAChC,OAAOA,EAAOgF,KAAI,SAAAxE,GAChB,IAAMsD,EAAS9D,EAAO6G,MAAK,qBAAGpG,OAAoBD,EAAOG,UAA9B,IACrBoD,EAAS/D,EAAO6G,MAAK,qBAAGpG,OAAoBD,EAAOE,UAA9B,IAE3B,OAAO,2BACFF,GADL,IAEEsD,SACAC,UAEH,GACF,CcSuC+C,CAAkBF,GAAhC,IACnBG,OAAM,kBAAMR,GAAW,EAAjB,IACNS,SAAQ,kBAAMX,GAAa,EAAnB,GACZ,GAAE,IAEH,IAAMY,EAAeC,mBACnB,kBdbG,SACLlH,EACAwE,EACAG,GAEA,IAAMwC,EAAYxC,IAAUjF,EAAUoF,MAAQ,EAAI,EAC5CmC,EAAY,YAAOjH,GAEzB,OAAKwE,EAIEyC,EAAazC,MAAK,SAAC4C,EAAGC,GAC3B,OAAQ7C,GACN,KAAK/E,EAAU6H,KACb,OAAOF,EAAE3G,KAAK8G,cAAcF,EAAE5G,MAAQ0G,EACxC,KAAK1H,EAAUE,IACb,OAAOyH,EAAEnH,IAAIsH,cAAcF,EAAEpH,KAAOkH,EACtC,KAAK1H,EAAU+H,KACb,OAAQJ,EAAErG,KAAOsG,EAAEtG,MAAQoG,EAC7B,KAAK1H,EAAUgI,KACb,OAAQL,EAAEvD,KAAOwD,EAAExD,MAAQsD,EAC7B,QACE,OAAO,EAEZ,IAhBQF,CAiBV,CcbSS,CAAgB1H,EAAQwE,EAAMG,EAApC,GACA,CAAC3E,EAAQwE,EAAMG,IAGXrE,EAAiB4G,mBACrB,kBAAMnH,EAAkBkH,EAAchH,EAAKC,EAAOC,EAAlD,GACA,CAAC8G,EAAchH,EAAKC,EAAOC,IAGvBwH,GAAuBvB,IAAcE,EACrCsB,IAAc5H,EAAOa,OACrBgH,IAAqBvH,EAAeO,OAE1C,OACE,qCACE,oBAAIU,UAAU,QAAd,yBAEA,qBAAKA,UAAU,QAAf,SACE,sBAAKA,UAAU,mDAAf,UACGoG,GACC,qBAAKpG,UAAU,uCAAf,SACE,cAAC2D,EAAD,MAIJ,qBAAK3D,UAAU,SAAf,SACE,sBAAKA,UAAU,sBAAf,UACG6E,GAAa,cAAC,EAAD,IAEbE,GACC,mBAAG,UAAQ,qBAAqB/E,UAAU,kBAA1C,kCAKDoG,GACC,qCACGC,GAAaC,GACZ,cAAC9C,EAAD,CACE/E,OAAQM,EACRsD,mBAAoBH,IAIvBmE,IAAcC,GACb,0FAKAD,GACA,mBAAG,UAAQ,kBAAX,8DAYnB,ECrFYE,G,MAAM,kBACjB,cAAC,IAAD,UACE,eAAC,IAAD,CAAOC,KAAK,IAAIC,QAAS,cAAC,EAAD,IAAzB,UACE,cAAC,IAAD,CAAOC,OAAK,EAACD,QAAS,cAAC,EAAD,MAEtB,cAAC,IAAD,CAAOD,KAAK,SAAZ,SACE,cAAC,IAAD,CAAOA,KAAK,SAASC,QAAS,cAAC,EAAD,QAGhC,cAAC,IAAD,CAAOD,KAAK,OAAOC,QAAS,cAAC,IAAD,CAAUvG,GAAG,IAAIyG,SAAO,MACpD,cAAC,IAAD,CAAOH,KAAK,IAAIC,QAAS,cAAC,EAAD,UAVZ,GCNnBG,qBAAWC,SAASC,eAAe,SAChCC,OACC,cAAC,IAAD,UACE,cAAC,EAAD,M","file":"static/js/main.726f9110.chunk.js","sourcesContent":["// eslint-disable-next-line max-len\nexport const API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nexport const CENTURIES = ['16', '17', '18', '19', '20'];\nexport const CENTURY_VALUE = 100;\nexport const EMPTY_VALUE = '-';\n","export enum SearchParam {\n  Sort = 'sort',\n  Order = 'order',\n  Sex = 'sex',\n  Query = 'query',\n  Centuries = 'centuries',\n}\n","export enum SortField {\n  Name = 'name',\n  Sex = 'sex',\n  Born = 'born',\n  Died = 'died',\n}\n","export enum SortOrder {\n  Asc = 'asc',\n  Desc = 'desc',\n}\n","export enum Sex {\n  All = 'all',\n  Male = 'm',\n  Female = 'f',\n}\n","import classNames from 'classnames';\nimport { CENTURY_VALUE } from './constants';\nimport { Person, SortField, SortOrder } from '../types';\n\nexport function getNavLinkClass({ isActive }: { isActive: boolean }) {\n  return classNames('navbar-item', {\n    'has-background-grey-lighter': isActive,\n  });\n}\n\nexport function getPreparedPeople(people: Person[]): Person[] {\n  return people.map(person => {\n    const mother = people.find(({ name }) => name === person.motherName);\n    const father = people.find(({ name }) => name === person.fatherName);\n\n    return {\n      ...person,\n      mother,\n      father,\n    };\n  });\n}\n\nexport function getSortedPeople(\n  people: Person[],\n  sort: string,\n  order: string,\n) {\n  const direction = order === SortOrder.Desc ? -1 : 1;\n  const sortedPeople = [...people];\n\n  if (!sort) {\n    return sortedPeople;\n  }\n\n  return sortedPeople.sort((a, b) => {\n    switch (sort) {\n      case SortField.Name:\n        return a.name.localeCompare(b.name) * direction;\n      case SortField.Sex:\n        return a.sex.localeCompare(b.sex) * direction;\n      case SortField.Born:\n        return (a.born - b.born) * direction;\n      case SortField.Died:\n        return (a.died - b.died) * direction;\n      default:\n        return 0;\n    }\n  });\n}\n\nexport function getCentury(year: number) {\n  return Math.ceil(year / CENTURY_VALUE);\n}\n\nexport function getFilteredPeople(\n  people: Person[],\n  sex: string,\n  query: string,\n  centuries: string[],\n) {\n  const normalizedQuery = query.toLowerCase();\n  let filteredPeople = [...people];\n\n  if (sex) {\n    filteredPeople = filteredPeople.filter(person => person.sex === sex);\n  }\n\n  if (normalizedQuery) {\n    filteredPeople = filteredPeople.filter(\n      ({ name, fatherName, motherName }) => (\n        name.toLowerCase().includes(normalizedQuery)\n        || fatherName?.toLowerCase().includes(normalizedQuery)\n        || motherName?.toLowerCase().includes(normalizedQuery)\n      ),\n    );\n  }\n\n  if (centuries.length) {\n    filteredPeople = filteredPeople.filter(\n      ({ born }) => centuries.includes(getCentury(born).toString()),\n    );\n  }\n\n  return filteredPeople;\n}\n\nexport function toggleCentury(\n  currentCenturies: string[],\n  centuryToToggle: string,\n) {\n  return currentCenturies.includes(centuryToToggle)\n    ? currentCenturies.filter(century => century !== centuryToToggle)\n    : [...currentCenturies, centuryToToggle];\n}\n","import { memo } from 'react';\nimport { NavLink, useLocation } from 'react-router-dom';\nimport { getNavLinkClass } from '../utils/helpers';\n\nexport const Navbar = memo(() => {\n  const { search } = useLocation();\n\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink\n            to=\"/\"\n            className={getNavLinkClass}\n          >\n            Home\n          </NavLink>\n\n          <NavLink\n            to={{ pathname: 'people', search }}\n            className={getNavLinkClass}\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n});\n","import { Outlet } from 'react-router-dom';\nimport { Navbar } from './Navbar';\n\nexport const Layout = () => (\n  <div data-cy=\"app\">\n    <Navbar />\n\n    <div className=\"section\">\n      <div className=\"container\">\n        <Outlet />\n      </div>\n    </div>\n  </div>\n);\n","export const NotFoundPage = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","export const HomePage = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","import { API_URL } from './utils/constants';\nimport { Person } from './types/Person';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\n/**\n * This function prepares a correct search string\n * from a given currentParams and paramsToUpdate.\n */\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  // copy currentParams by creating new object from a string\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        // we delete the key to remove old values\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  // we return a string to use it inside links\n  return newParams.toString();\n}\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { memo } from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person, Sex } from '../types';\n\ntype Props = {\n  person: Person;\n};\n\nexport const PersonLink: React.FC<Props> = memo(({ person }) => {\n  const { search } = useLocation();\n\n  const { slug, name, sex } = person;\n\n  return (\n    <Link\n      to={{ pathname: `../${slug}`, search }}\n      className={classNames({\n        'has-text-danger': sex === Sex.Female,\n      })}\n    >\n      {name}\n    </Link>\n  );\n});\n","import { memo } from 'react';\nimport classNames from 'classnames';\nimport { EMPTY_VALUE } from '../utils/constants';\nimport { Person } from '../types';\nimport { PersonLink } from './PersonLink';\n\ntype Props = {\n  person: Person;\n  selectedPersonSlug?: string;\n};\n\nexport const PeopleTableRow: React.FC<Props> = memo(({\n  person,\n  selectedPersonSlug,\n}) => {\n  const {\n    slug,\n    sex,\n    born,\n    died,\n    mother,\n    motherName,\n    father,\n    fatherName,\n  } = person;\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={classNames({\n        'has-background-warning': slug === selectedPersonSlug,\n      })}\n    >\n      <td>\n        <PersonLink person={person} />\n      </td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n\n      <td>\n        {mother\n          ? <PersonLink person={mother} />\n          : motherName ?? EMPTY_VALUE}\n      </td>\n\n      <td>\n        {father\n          ? <PersonLink person={father} />\n          : fatherName ?? EMPTY_VALUE}\n      </td>\n    </tr>\n  );\n});\n","import { memo } from 'react';\nimport { Link, LinkProps, useSearchParams } from 'react-router-dom';\nimport { getSearchWith, SearchParams } from '../utils/searchHelper';\n\n/**\n * To replace the the standard `Link` we take all it props except for `to`\n * along with the custom `params` prop that we use for updating the search\n */\ntype Props = Omit<LinkProps, 'to'> & {\n  params: SearchParams,\n};\n\n/**\n * SearchLink updates the given `params` in the search keeping the `pathname`\n * and the other existing search params (see `getSearchWith`)\n */\nexport const SearchLink: React.FC<Props> = memo(({\n  children, // this is the content between the open and closing tags\n  params, // the params to be updated in the `search`\n  ...props // all usual Link props like `className`, `style` and `id`\n}) => {\n  const [searchParams] = useSearchParams();\n\n  return (\n    <Link\n      // to={{ search: getSearchWith(searchParams, { query: 'sdf' }) }}\n      // to={{ search: getSearchWith(searchParams, { query: null }) }}\n      // to={{ search: getSearchWith(searchParams, { centuries: ['16', '18'] }) }}\n      to={{\n        search: getSearchWith(searchParams, params),\n      }}\n      {...props} // copy all the other props\n    >\n      {children}\n    </Link>\n  );\n});\n","import { memo } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { SearchParam, SortOrder } from '../types';\nimport { SearchParams } from '../utils';\nimport { SearchLink } from './SearchLink';\n\ntype Props = {\n  field: string;\n};\n\nexport const SortLink: React.FC<Props> = memo(({ field }) => {\n  const [searchParams] = useSearchParams();\n  const sort = searchParams.get(SearchParam.Sort) ?? '';\n  const order = searchParams.get(SearchParam.Order) ?? '';\n\n  const params: SearchParams = {\n    sort: null,\n    order: null,\n  };\n\n  let iconClass = 'fa-sort-down';\n\n  if (sort !== field) {\n    params.sort = field;\n\n    iconClass = 'fa-sort';\n  } else if (sort === field && !order) {\n    params.sort = field;\n    params.order = SortOrder.Desc;\n\n    iconClass = 'fa-sort-up';\n  }\n\n  return (\n    <SearchLink\n      params={params}\n    >\n      <span className=\"icon\">\n        <i className={classNames('fas', iconClass)} />\n      </span>\n    </SearchLink>\n  );\n});\n","import { memo } from 'react';\nimport { Person, SortField } from '../types';\nimport { PeopleTableRow } from './PeopleTableRow';\nimport { SortLink } from './SortLink';\n\ntype Props = {\n  people: Person[];\n  selectedPersonSlug?: string;\n};\n\nexport const PeopleTable: React.FC<Props> = memo(({\n  people,\n  selectedPersonSlug,\n}) => (\n  <table\n    data-cy=\"peopleTable\"\n    className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n  >\n    <thead>\n      <tr>\n        {Object.entries(SortField).map(([option, value]) => (\n          <th key={value}>\n            <span className=\"is-flex is-flex-wrap-nowrap\">\n              {option}\n\n              <SortLink field={value} />\n            </span>\n          </th>\n        ))}\n\n        <th>Mother</th>\n        <th>Father</th>\n      </tr>\n    </thead>\n\n    <tbody>\n      {people.map(person => (\n        <PeopleTableRow\n          key={person.slug}\n          person={person}\n          selectedPersonSlug={selectedPersonSlug}\n        />\n      ))}\n    </tbody>\n  </table>\n));\n","import { memo } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { CENTURIES } from '../utils/constants';\nimport { SearchParam, Sex } from '../types';\nimport { toggleCentury } from '../utils';\nimport { SearchLink } from './SearchLink';\n\nexport const PeopleFilters = memo(() => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const sex = searchParams.get(SearchParam.Sex) ?? '';\n  const query = searchParams.get(SearchParam.Query) ?? '';\n  const centuries = searchParams.getAll(SearchParam.Centuries) ?? [];\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const params = new URLSearchParams(searchParams);\n    const inputValue = event.target.value;\n\n    if (inputValue) {\n      params.set(SearchParam.Query, inputValue);\n    } else {\n      params.delete(SearchParam.Query);\n    }\n\n    setSearchParams(params);\n  };\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        {Object.entries(Sex).map(([option, value]) => {\n          const isActive = value === Sex.All\n            ? !sex\n            : sex === value;\n          const sexValue = value === Sex.All\n            ? null\n            : value;\n\n          return (\n            <SearchLink\n              key={value}\n              className={classNames({\n                'is-active': isActive,\n              })}\n              params={{ sex: sexValue }}\n            >\n              {option}\n            </SearchLink>\n          );\n        })}\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            type=\"search\"\n            data-cy=\"NameFilter\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handleQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <div className=\"level-left\">\n            {CENTURIES.map(century => (\n              <SearchLink\n                key={century}\n                className={classNames('button', 'mr-1', {\n                  'is-info': centuries.includes(century),\n                })}\n                params={{ centuries: toggleCentury(centuries, century) }}\n              >\n                {century}\n              </SearchLink>\n            ))}\n          </div>\n\n          <div className=\"level-right ml-4\">\n            <SearchLink\n              className={classNames('button', 'is-success', {\n                'is-outlined': !!centuries.length,\n              })}\n              params={{ centuries: null }}\n            >\n              All\n            </SearchLink>\n          </div>\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <SearchLink\n          className=\"button is-link is-outlined is-fullwidth\"\n          params={{\n            sex: null,\n            query: null,\n            centuries: null,\n          }}\n        >\n          Reset all filters\n        </SearchLink>\n      </div>\n    </nav>\n  );\n});\n","import { useEffect, useMemo, useState } from 'react';\nimport { useParams, useSearchParams } from 'react-router-dom';\nimport { Person, SearchParam } from '../types';\nimport { getPeople } from '../api';\nimport {\n  getPreparedPeople,\n  getSortedPeople,\n  getFilteredPeople,\n} from '../utils';\nimport { Loader } from './Loader';\nimport { PeopleTable } from './PeopleTable';\nimport { PeopleFilters } from './PeopleFilters';\n\nexport const PeoplePage = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n  const [people, setPeople] = useState<Person[]>([]);\n  const { slug } = useParams();\n  const [searchParams] = useSearchParams();\n\n  const sort = searchParams.get(SearchParam.Sort) ?? '';\n  const order = searchParams.get(SearchParam.Order) ?? '';\n  const sex = searchParams.get(SearchParam.Sex) ?? '';\n  const query = searchParams.get(SearchParam.Query) ?? '';\n  const centuries = searchParams.getAll(SearchParam.Centuries) ?? [];\n\n  useEffect(() => {\n    setIsLoading(true);\n\n    getPeople()\n      .then(peopleFromAfar => setPeople(getPreparedPeople(peopleFromAfar)))\n      .catch(() => setIsError(true))\n      .finally(() => setIsLoading(false));\n  }, []);\n\n  const sortedPeople = useMemo(\n    () => getSortedPeople(people, sort, order),\n    [people, sort, order],\n  );\n\n  const filteredPeople = useMemo(\n    () => getFilteredPeople(sortedPeople, sex, query, centuries),\n    [sortedPeople, sex, query, centuries],\n  );\n\n  const isRequestSuccessful = !isLoading && !isError;\n  const hasPeople = !!people.length;\n  const hasVisiblePeople = !!filteredPeople.length;\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          {isRequestSuccessful && (\n            <div className=\"column is-7-tablet is-narrow-desktop\">\n              <PeopleFilters />\n            </div>\n          )}\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {isLoading && <Loader />}\n\n              {isError && (\n                <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n                  Something went wrong\n                </p>\n              )}\n\n              {isRequestSuccessful && (\n                <>\n                  {hasPeople && hasVisiblePeople && (\n                    <PeopleTable\n                      people={filteredPeople}\n                      selectedPersonSlug={slug}\n                    />\n                  )}\n\n                  {hasPeople && !hasVisiblePeople && (\n                    <p>\n                      There are no people matching the current search criteria\n                    </p>\n                  )}\n\n                  {!hasPeople && (\n                    <p data-cy=\"noPeopleMessage\">\n                      There are no people on the server\n                    </p>\n                  )}\n                </>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import {\n  Route,\n  Routes,\n  Navigate,\n} from 'react-router-dom';\nimport {\n  Layout,\n  HomePage,\n  PeoplePage,\n  NotFoundPage,\n} from './components';\n\nimport './App.scss';\n\nexport const App = () => (\n  <Routes>\n    <Route path=\"/\" element={<Layout />}>\n      <Route index element={<HomePage />} />\n\n      <Route path=\"people\">\n        <Route path=\":slug?\" element={<PeoplePage />} />\n      </Route>\n\n      <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n      <Route path=\"*\" element={<NotFoundPage />} />\n    </Route>\n  </Routes>\n);\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}